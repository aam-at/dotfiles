;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------

     ;; ----------------------------------------------------------------
     ;; General
     ;; ----------------------------------------------------------------
     better-defaults
     eyebrowse
     (colors :variables colors-enable-rainbow-identifiers t)
     themes-megapack
     spell-checking
     syntax-checking
     version-control git github
     (chinese :variables
              ;; chinese-enable-fcitx t
              ;; chinese-default-input-method 'wubi
              chinese-enable-youdao-dict t
              chinese-enable-avy-pinyin nil)
     ;; More VIM sugar in emacs
     evil-snipe unimpaired vinegar evil-cleverparens
     ;; ----------------------------------------------------------------
     ;; Programming languages
     ;; ----------------------------------------------------------------
     c-c++ python lua haskell go
     html javascript markdown ipython-notebook
     emacs-lisp
     (latex :variables
            latex-build-command "LatexMk"
            latex-enable-folding t)
     extra-langs
     shell-scripts windows-scripts vimscript autohotkey
     ;; Auto-completion & tags
     auto-completion ycmd cscope
     ;; ----------------------------------------------------------------
     ;; Tools
     ;; ----------------------------------------------------------------
     (mu4e :variables mu4e-account-alist t)
     notmuch erc ;; email & irc
     chrome search-engine ;; web
     org evernote ;; note-taking and organizer
     emoji xkcd ;; something for fun
     (elfeed :variables rmh-elfeed-org-files (list "~/Dropbox/Notes/feeds.org"))
     speed-reading
     selectric typography ;; writing
     (shell :variables
             shell-default-height 30
             shell-default-position 'bottom)
     tmux ranger
     (dash :variables ;; offline help search with zeal/dash on linux/osx
           dash-helm-dash-docset-path "~/.local/share/Zeal/Zeal/docsets")
     smex finance
     wakatime ;; tracking coding time
     fasd ;; like autojump but better. TODO: try to use it with fish shell
     pandoc ;; pandoc the most extensive file document conversion tool

     ;; My private layers
     aam writing pdf-tools
     habitrpg
     org-extras python-extras
     graphviz
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '()
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(ox-pandoc)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'. (default t)
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the
   ;; variable is `emacs' then the `holy-mode' is enabled at startup. `hybrid'
   ;; uses emacs key bindings for vim's insert mode, but otherwise leaves evil
   ;; unchanged. (default 'vim)
   dotspacemacs-editing-style 'hybrid
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'.
   ;; (default '(recents projects))
   dotspacemacs-startup-lists '(recents projects)
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(solarized-light
                         solarized-dark
                         spacemacs-dark
                         spacemacs-light
                         leuven
                         monokai
                         zenburn)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 12
                               :weight normal
                               :width normal
                               :powerline-scale 1.1)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m)
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil `Y' is remapped to `y$'. (default t)
   dotspacemacs-remap-Y-to-y$ t
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and
   ;; `find-contrib-file' (SPC f e c) are replaced. (default nil)
   dotspacemacs-use-ido nil
   ;; If non nil, `helm' will try to miminimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-micro-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init'.  You are free to put any
user code."
  )

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
 This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code."
  ;; Emacs configuration
  (setq vc-follow-symlinks t)
  (desktop-save-mode t)
  (setq projectile-tags-command "ctags-exuberant -Re -f \"%s\" %s")

  ;; epa encryption
  (setq epa-file-select-keys 0)
  (setq epa-file-cache-passphrase-for-symmetric-encryption t)
  (add-to-list 'load-suffixes ".el.gpg")

  ;; tramp configuration
  (setq tramp-default-method "rsync")

  ;; enable visual line navigation
  (define-key evil-motion-state-map "j" 'evil-next-visual-line)
  (define-key evil-motion-state-map "k" 'evil-previous-visual-line)
  (define-key evil-visual-state-map "j" 'evil-next-visual-line)
  (define-key evil-visual-state-map "k" 'evil-previous-visual-line)

  ;; easy window navigation
  (key-seq-define evil-normal-state-map "wh" 'evil-window-left)
  (key-seq-define evil-normal-state-map "wj" 'evil-window-down)
  (key-seq-define evil-normal-state-map "wk" 'evil-window-up)
  (key-seq-define evil-normal-state-map "wl" 'evil-window-right)
  ;; ;; easy window splitting
  (key-seq-define evil-normal-state-map "wy" 'split-window-right)
  (key-seq-define evil-normal-state-map "wu" 'split-window-below-and-focus)
  (key-seq-define evil-normal-state-map "wi" 'split-window-below)
  (key-seq-define evil-normal-state-map "wo" 'split-window-right-and-focus)
  (key-seq-define evil-normal-state-map "wm" 'toggle-maximize-buffer)
  ;; easy kill
  (key-seq-define evil-normal-state-map "kf" 'delete-frame)
  (key-seq-define evil-normal-state-map "kw" 'evil-quit)
  (key-seq-define evil-normal-state-map "kb" 'kill-this-buffer)

  ;; programming settings
  (defun my-prog-settings()
    (spacemacs/toggle-fill-column-indicator-on)
    (spacemacs/toggle-line-numbers-on)
    (linum-relative-on)
    )
  (add-hook 'prog-mode-hook 'my-prog-settings)
  ;; basic text settings
  (add-hook 'text-mode-hook 'visual-line-mode)
  (spacemacs/set-leader-keys "C-t l" 'visual-line-mode)

  ;; Chrome settings
  (add-hook 'edit-server-done-hook (lambda () (shell-command "wmctrl -a \"Google Chrome\"")))

  ;; Wakatime settings
  (setq wakatime-api-key "api-key")
  (setq wakatime-python-path "/usr/bin/python")
  (setq wakatime-cli-path "/usr/local/bin/wakatime")

  ;; Habitica settings
  (setq habitrpg-api-url "https://habitica.com/api/v2")
  (setq habitrpg-api-user "api-user")
  (setq habitrpg-api-token "api-token")
  (add-hook 'org-after-todo-state-change-hook 'habitrpg-add 'append)
  (add-hook 'org-clock-in-hook 'habitrpg-clock-in)
  (add-hook 'org-clock-out-hook 'habitrpg-clock-out)
  (with-eval-after-load 'habitrpg
    (add-to-list 'hrpg-tags-list "research")
    (add-to-list 'hrpg-tags-list "writing")
    (add-to-list 'hrpg-tags-list "programming"))

  ;; password-store settings
  (setq password-store-password-length 18)

  ;; calendar settings
  (evil-set-initial-state 'calendar-mode 'emacs)
  (setq calendar-date-style "european")

  ;; Org settings
  (setq org-directory "~/Dropbox/Notes")
  (setq org-agenda-files (list (concat org-directory "/work.org")
                               (concat org-directory "/personal.org")
                               ;; File so sync with google calendar
                               (concat org-directory "/fromwork.org")
                               (concat org-directory "/todo.org")
                               (concat org-directory "/bookmarks.org")
                               (concat org-directory "/ideas.org")
                               (concat org-directory "/papers.org")
                               (concat org-directory "/books.org")
                               ;; (concat org-directory "/drills.org")
                               (concat org-directory "/journal")))
  (setq org-default-notes-file (concat org-directory "/refile.org"))
  (setq org-capture-templates
        '(
          ("i" "Idea" entry (file (concat org-directory "/ideas.org"))
           "* %^{Short description of the idea}
:PROPERTIES:
:CREATED:%U
:END:
%i\n%?\n
Link: %a\n")
          ("h" "Habit" entry (file (concat org-directory "/personal.org"))
           "* TODO %?
SCHEDULED: %^{When should we stop?}t +1d
:PROPERTIES:
:STYLE: habit
:CREATED:%U
:END:
%i\n")
          ("n" "Note" entry (file (concat org-directory "/personal.org"))
           "* %^{Select note title}
:PROPERTIES:
:CREATED:%U
:END:
%i\n%?\n")
          ("t" "Todo" entry (file (concat org-directory "/todo.org"))
"* TODO %?
:PROPERTIES:
:CREATED:%U
:END:
%i\n Link: %a\n")))
  ;; Agenda management
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-custom-commands
        '(("f" occur-tree "FIXME")
          ("w" "Weekly tasks" tags "+weekly")
          ("W" "Waiting tasks" todo-tree "WAITING")
          ("c" "Cleaning tasks" tags "+cleaning")
          ("d" "Daily tasks" tags "+daily")))
  ;; Anki like functionality
  (require 'org-drill)
  (add-to-list 'org-modules 'org-drill t)
  (setq org-learn-always-reschedule t)
  (setq org-drill-add-random-noise-to-intervals-p t)
  ;; Tracking habits
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit t)
  (setq org-habit-graph-column 80)
  (setq org-log-into-drawer "LOGBOOK")
  ;; Pomodoro and timer
  (add-to-list 'org-modules 'org-timer t)
  ;; Org-effectiveness
  (add-to-list 'org-modules 'org-effectiveness t)
  ;; Mobile setup
  (setq org-mobile-directory "~/Dropbox/Notes/mobile")
  (setq org-mobile-inbox-for-pull (concat org-directory "/from-mobile.org"))
  ;; configuration for org and google calendar synchronization
  (setq org-caldav-calendars
        '((:calendar-id "iu5alt927aue6hsjis25qhsark@group.calendar.google.com"
                        :files ("~/Dropbox/Notes/work.org")
                        :inbox "~/Dropbox/Notes/fromwork.org")))
  ;; configure journal-dir
  (setq org-journal-dir "~/Dropbox/Notes/journal")
  ;; show images inline (only works in GUI)
  (when (window-system)
    (setq org-startup-with-inline-images t))
  ;; limit images width
  (setq org-image-actual-width '(800))
  ;; Org-ref configuration
  (setq reftex-default-bibliography '("~/Dropbox/Research/Bibliography/references.bib"))
  (setq org-ref-bibliography-notes "~/Dropbox/Notes/papers.org"
        org-ref-default-bibliography '("~/Dropbox/Research/Bibliography/references.bib")
        org-ref-pdf-directory "~/Dropbox/Research/Bibliography/Papers")
  ;; org-doing settings
  (setq org-doing-file (concat org-directory "/todo.org"))

  ;; Latex/Tex settings
  (defun my-latex-settings()
    (add-to-list 'TeX-output-view-style
                 '("^pdf$" "." "okular --unique %o#src:%n%b"))
    ;; disable annoying wrapping
    (spacemacs/toggle-auto-fill-mode-off)
    ;; turn on visual line wrapping and visual line navigation
    (spacemacs/toggle-visual-line-navigation-on)
    ;; set manually docset for zeal
    (setq zeal-at-point-docset "latex"))
  (add-hook 'LaTeX-mode-hook 'my-latex-settings)

  ;; Auctex settings
  (setq-default TeX-master nil) ; Query for master file.
  (setq TeX-auto-untabify t)
  ;; zathura for emacs
  (setq zathura-procs ())
  (defun zathura-forward-search ()
    ;; Open the compiled pdf in Zathura with synctex. This is complicated since
    ;; 1) Zathura refuses to acknowledge Synctex directive if the pdf is not
    ;; already opened
    ;; 2) This means we have to bookkeep open Zathura processes ourselves: first
    ;; open a new pdf from the beginning, if it is not already open. Then call
    ;; Zathura again with the synctex directive.
    (interactive)
    (let* ((zathura-launch-buf (get-buffer-create "*Zathura Output*"))
           (pdfname (TeX-master-file "pdf"))
           (zatentry (assoc pdfname zathura-procs))
           (zatproc (if (and zatentry (process-live-p (cdr zatentry)))
                        (cdr zatentry)
                      (progn
                        (let ((proc (progn (message "Launching Zathura")
                                           (start-process "zathura-launch"
                                                          zathura-launch-buf "zathura"
                                                          "-x" "emacsclient +%{line} %{input}" pdfname))))
                          (when zatentry
                            (setq zathura-procs (delq zatentry zathura-procs)))
                          (add-to-list 'zathura-procs (cons pdfname proc))
                          (set-process-query-on-exit-flag proc nil)
                          proc))))
           (pid (process-id zatproc))
           (synctex (format "%s:0:%s"
                            (TeX-current-line)
                            (TeX-current-file-name-master-relative))))
      (start-process "zathura-synctex" zathura-launch-buf "zathura" "--synctex-forward" synctex pdfname)))
  ;; Pdf syncing
  (setq TeX-view-program-list
        '(("Skim" "displayline -b -g %n %o %b")
          ("Evince" "evince --page-index=%(outpage) %o")
          ("Okular" "okular --unique %o#src:%n%b")
          ("Zathura" zathura-forward-search)))
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")
                                     (output-dvi "xdvi")))
  (setq TeX-source-correlate-method 'synctex)
  (setq TeX-source-correlate-mode t)
  (setq TeX-source-correlate-start-server t)
  (with-eval-after-load 'tex
    (add-to-list 'TeX-command-list '("View Evince" "evince %o" TeX-run-command nil t
                                     :help "Open document using evince"))
    (add-to-list 'TeX-command-list '("View Zathura" "zathura %o" TeX-run-command nil t
                                      :help "Open document using zathura")))

  ;; Doc-view settings
  (defun my-doc-view-settings ()
    ;; Automatic update for pdf
    (auto-revert-mode)
    ;; Emacs freezes with linum-mode
    (linum-mode -1)
    )
  (add-hook 'doc-view-mode-hook 'my-doc-view-settings)
  (defadvice doc-view-display (after fit-width activate)
    (doc-view-fit-width-to-window))

  ;; Epub reading
  (setq auto-mode-alist (append (list '("\\.epub$" . archive-mode)) auto-mode-alist))
  (setq auto-coding-alist (append (list '("\\.epub$" . no-conversion)) auto-coding-alist))

  ;; configure langtool
  (setq langtool-java-classpath
        "/usr/share/languagetool:/usr/share/java/languagetool/*")
  (setq langtool-default-language "en-US")
  ;; thesaurus api-key
  (setq thesaurus-bhl-api-key "api-key")

  ;; C++ development
  (set-variable 'ycmd-server-command '("python" "~/local/tools/ycmd/ycmd"))

  ;; Python development
  (setq ropemacs-confirm-saving 'nil)
  (setq ropemacs-enable-autoimport 't)

  ;; Lua development
  (setq lua-default-application "qlua")
  (setq lua-default-command-switches (quote ("-ltorch" "-lenv" "-i")))

  ;; default elfeed search
  (setq-default elfeed-search-filter "@1-week-ago +unread ")

  ;; email configuration
  (setq mu4e-maildir "~/.mail"
        mu4e-refile-folder "/archive"
        mu4e-trash-folder "/trash"
        mu4e-attachment-dir "~/Downloads"
        mu4e-get-mail-command "mbsync -a"
        mu4e-update-interval 600
        mu4e-compose-signature-auto-include nil
        mu4e-view-show-images t
        mu4e-view-show-addresses t
        message-kill-buffer-on-exit t
        mu4e-enable-notifications t)
  ;; See: http://emacs.stackexchange.com/questions/3051/how-can-i-use-eww-as-a-renderer-for-mu4e
  (defun my-render-html-message ()
    "Replacement for standard html2text using shr."
    (let ((dom (libxml-parse-html-region (point-min) (point-max))))
      (erase-buffer)
      (shr-insert-document dom)
      (goto-char (point-min))))
  (setq mu4e-html2text-command 'my-render-html-message)
  ;; (setq mu4e-html2text-command "w3m -dump -T text/html")
  (setq mu4e-view-prefer-html t)

  ;; org-mu4e settings
  (setq org-mu4e-convert-to-html t)

  ;; give me ISO(ish) format date-time stamps in the header list
  (setq  mu4e-headers-date-format "%Y-%m-%d %H:%M")

  ;; customize the reply-quote-string
  ;; M-x find-function RET message-citation-line-format for docs
  (setq message-citation-line-format "%N @ %Y-%m-%d %H:%M %Z:\n")
  (setq message-citation-line-function 'message-insert-formatted-citation-line)

  ;; the headers to show in the headers list -- a pair of a field
  ;; and its width, with `nil' meaning 'unlimited'
  ;; (better only use that for the last field.
  ;; These are the defaults:
  (setq mu4e-headers-fields
        '( (:date          .  25)
           (:flags         .   6)
           (:from          .  22)
           (:subject       .  nil)))

  ;; mail account list
  (setq mu4e-account-alist
        '(("gmail"
           ;; Under each account, set the account-specific variables you want.
           (mu4e-sent-messages-behavior delete)
           (mu4e-sent-folder "/gmail/[Gmail]/.Sent Mail")
           (mu4e-drafts-folder "/gmail/[Gmail]/.Drafts")
           (mu4e-trash-folder "/gmail/[Gmail]/.Trash")
           (user-mail-address "alexander.matyasko@gmail.com")
           (user-full-name "Alexander Matyasko")
           (message-send-mail-function smtpmail-send-it)
           (starttls-use-gnutls t)
           (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
           (smtpmail-auth-credentials
            '(("smtp.gmail.com" 587 "yi.tang.uni@gmail.com" nil)))
           (smtpmail-default-smtp-server "smtp.gmail.com")
           (smtpmail-smtp-server "smtp.gmail.com")
           (smtpmail-smtp-service 587)
           (smtpmail-smtp-user "alexander.matyasko@gmail.com")
           (mu4e-compose-signature (concat
                                    "Best,\n"
                                    "Alexander Matyasko")))
          ("office"
           (mu4e-sent-messages-behavior sent)
           (mu4e-sent-folder "/office/Sent Items")
           (mu4e-drafts-folder "/office/Drafts")
           (mu4e-trash-folder "/office/Deleted Items")
           (user-mail-address "aliaksan001@e.ntu.edu.sg")
           (user-full-name "Alexander Matyasko")
           (message-send-mail-function smtpmail-send-it)
           (smtpmail-stream-type starttls)
           (smtpmail-default-smtp-server "smtp.office365.com")
           (smtpmail-smtp-server "smtp.office365.com")
           (smtpmail-smtp-service 587)
           (smtpmail-smtp-user "aliaksan001@e.ntu.edu.sg")
                 ;; account info
           (user-mail-address "aliaksan001@e.ntu.edu.sg")
           (user-full-name  "Alexander Matyasko")
                 ;; mu4e
           (mu4e-drafts-folder "/office/Drafts")
           (mu4e-sent-folder   "/office/Sent Items")
           (mu4e-trash-folder  "/office/Trash")
           (mu4e-maildir-shortcuts  '(("/office/INBOX"       . ?i)
                                      ("/office/Sent Items"  . ?s)
                                      ("/office/Trash"       . ?t)))
           (mu4e-compose-signature (concat
                                    "Alexander Matyasko\n"
                                    "PhD Student")))))
  (mu4e/mail-account-reset)
  (setq mu4e-compose-dont-reply-to-self t)
  (setq mu4e-user-mail-address-list '("alexander.matyasko@gmail.com"
                                     "aliaksan001@e.ntu.edu.sg"))
  (setq mu4e-maildir-shortcuts
        '(("/gmail/INBOX" . ?g)
          ("/office/INBOX" . ?c)))
  (setq mu4e-maildirs-extension-maildir-separator    "*"
        mu4e-maildirs-extension-submaildir-separator "✉"
        mu4e-maildirs-extension-action-text          nil)
  (setq smtpmail-queue-dir "~/.mail/queued-mail/")

  ;; email org-contacts
  (setq org-contacts-files "~/Dropbox/Notes/contacts.org")
  (setq mu4e-org-contacts-file  "~/Dropbox/Notes/contacts.org")
  (add-to-list 'mu4e-headers-actions
               '("org-contact-add" . mu4e-action-add-org-contact) t)
  (add-to-list 'mu4e-view-actions
               '("org-contact-add" . mu4e-action-add-org-contact) t)

  ;; message mode hooks
  (add-hook 'message-mode-hook 'turn-on-orgstruct)
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
  (add-hook 'message-mode-hook 'turn-on-auto-fill)
  (add-hook 'message-mode-hook 'orgtbl-mode)
  ;; confirmation
  (add-hook 'message-send-hook
            (lambda ()
              (unless (yes-or-no-p "Sure you want to send this?")
                (signal 'quit nil))))

  (require 'org-mime)
  (setq org-mime-library 'mml)
  (add-hook 'message-mode-hook
            (lambda ()
              (local-set-key "\C-c\M-o" 'org-mime-htmlize)))
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\C-c\M-o" 'org-mime-org-buffer-htmlize)))
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c M-o") 'org-mime-subtree)))
  (add-hook 'org-mime-html-hook
            (lambda ()
              ;; (insert-file-contents "~/git/.emacs.d/personal/css/office.css")
              (org-mime-change-element-style
               "blockquote" "border-left: 2px solid gray; padding-left: 4px;")
              (org-mime-change-element-style
               "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                             "#E6E1DC" "#232323"))))
  ;; twitter settings
  (setq twittering-tinyurl-service 'bit.ly)
  (setq twittering-bitly-login "login")
  (setq twittering-bitly-api-key "api-key")

  ;; load encrypted part of config
  (load-library "secure-config")
)

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
