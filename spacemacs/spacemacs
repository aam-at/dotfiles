;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Layer configuration:
This function should only modify configuration layer settings."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs

   ;; Lazy installation of layers (i.e. layers are installed only when a file
   ;; with a supported type is opened). Possible values are `all', `unused'
   ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
   ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
   ;; lazy install any layer that support lazy installation even the layers
   ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
   ;; installation feature and you have to explicitly list a layer in the
   ;; variable `dotspacemacs-configuration-layers' to install it.
   ;; (default 'unused)
   dotspacemacs-enable-lazy-installation 'unused

   ;; If non-nil then Spacemacs will ask for confirmation before installing
   ;; a layer lazily. (default t)
   dotspacemacs-ask-for-lazy-installation t

   ;; If non-nil layers with lazy install support are lazy installed.
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '("~/dotfiles/spacemacs/")

   ;; List of configuration layers to load.
   dotspacemacs-configuration-layers
   (append '(
             ;; ----------------------------------------------------------------
             ;; Example of useful layers you may want to use right away.
             ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
             ;; `M-m f e R' (Emacs style) to install them.
             ;; ----------------------------------------------------------------

             ;; ----------------------------------------------------------------
             ;; General
             ;; ----------------------------------------------------------------
             better-defaults
             helm
             (colors :variables colors-enable-rainbow-identifiers t)
             (ibuffer :variables ibuffer-group-buffers-by 'projects)
             spell-checking
             syntax-checking
             version-control git github
             themes-megapack unicode-fonts
             (chinese :variables
                      ;; chinese-enable-fcitx t
                      ;; chinese-default-input-method 'wubi
                      chinese-enable-youdao-dict t
                      chinese-enable-avy-pinyin nil)
             parinfer
             ;; More VIM sugar in emacs
             evil-snipe vinegar
             ;; ----------------------------------------------------------------
             ;; Programming languages
             ;; ----------------------------------------------------------------
             dap
             semantic
             (python :variables
                     python-backend 'lsp
                     python-lsp-server 'mspyls
                     python-lsp-git-root (getenv "PYTHON_LSP_GIT_ROOT")
                     python-format-on-save t
                     python-sort-imports-on-save t)
             ipython-notebook
             c-c++
             rust
             (cmake :variables cmake-enable-cmake-ide-support t)
             debug
             go
             haskell
             lua
             emacs-lisp
             (javascript :variables javascript-disable-tern-port-files nil)
             html markdown
             csv
             (latex :variables
                    latex-build-command "LatexMk"
                    latex-enable-auto-fill t
                    latex-enable-folding t)
             bibtex
             major-modes
             yaml
             protobuf
             shell-scripts windows-scripts vimscript autohotkey
             rebox ;; text boxes
             ;; Auto-completion
             (auto-completion :variables
                              auto-completion-enable-help-tooltip 'manual
                              auto-completion-enable-snippets-in-popup t
                              auto-completion-enable-sort-by-usage t
                              auto-completion-private-snippets-directory "~/dotfiles/spacemacs/snippets")
             ;; ----------------------------------------------------------------
             ;; Tools
             ;; ----------------------------------------------------------------
             pdf
             epub
             imenu-list
             helpful
             erc
             multiple-cursors
             ;; web
             chrome search-engine
             ;; note taking
             deft
             (org :variables
                  org-want-todo-bindings t
                  org-enable-sticky-header nil
                  org-enable-trello-support t
                  org-enable-org-journal-support t
                  org-enable-bootstrap-support t
                  org-enable-reveal-js-support t)
             spotify
             twitter
             ;; FIXME: disabled. emoji clobbers org-mode match data
             ;; emoji
             xkcd ;; something for fun
             (elfeed :variables
                     elfeed-search-filter "@1-months-ago +unread"
                     elfeed-spacemacs-layout-name "@Elfeed"
                     elfeed-spacemacs-layout-binding "f"
                     rmh-elfeed-org-files (list "~/Dropbox/Org/feeds.org")
                     elfeed-goodies/entry-pane-position 'bottom
                     url-queue-timeout 10)
             speed-reading
             selectric typography ;; writing
             (shell :variables
                    shell-default-term-shell "/usr/bin/fish"
                    shell-enable-smart-eshell t
                    shell-default-height 30
                    shell-default-position 'bottom)
             ranger
             ;; neotree
             treemacs
             (dash :variables ;; offline help search with zeal/dash on linux/osx
                   dash-helm-dash-docset-path "~/.local/share/Zeal/Zeal/docsets")
             bm smex
             finance
             pandoc ;; pandoc the most extensive file document conversion tool

             ;; My private layers
             aam
             writing
             org-extras
             org-roam
             python-extras cpp-extras
             emacs-icons)

           ;; OS-specific layers
           (when (spacemacs/system-is-linux)
             '(
               ;; email
               (mu4e :variables
                     mu4e-spacemacs-layout-name "@Mu4e"
                     mu4e-spacemacs-layout-binding "m"
                     mu4e-account-alist t
                     mu4e-use-maildirs-extension t
                     mu4e-enable-mode-line t
                     mu4e-enable-notifications t
                     mu4e-installation-path "/usr/local/share/emacs/site-lisp/mu4e")
               (notmuch :variables
                        notmuch-spacemacs-layout-name "@Notmuch"
                        notmuch-spacemacs-layout-binding "n")
               ;; programming completion
               cscope gtags
               ;; some utilities
               evernote
               pass
               fasd ;; like autojump but better. TODO: try to use it with fish shell
               tmux
               xclipboard systemd)))

   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages, then consider creating a layer. You can also put the
   ;; configuration in `dotspacemacs/user-config'.
   ;; To use a local version of a package, use the `:location' property:
   ;; '(your-package :location "~/path/to/your-package/")
   ;; Also include the dependencies as they will not be resolved automatically.
   dotspacemacs-additional-packages '(magit-annex)

   ;; A list of packages that cannot be updated.
   dotspacemacs-frozen-packages '()

   ;; A list of packages that will not be installed and loaded.
   dotspacemacs-excluded-packages '(window-purpose)

   ;; Defines the behaviour of Spacemacs when installing packages.
   ;; Possible values are `used-only', `used-but-keep-unused' and `all'.
   ;; `used-only' installs only explicitly used packages and deletes any unused
   ;; packages as well as their unused dependencies. `used-but-keep-unused'
   ;; installs only the used packages but won't delete unused ones. `all'
   ;; installs *all* packages supported by Spacemacs and never uninstalls them.
   ;; (default is `used-only')
   dotspacemacs-install-packages 'used-only))

(defun dotspacemacs/init ()
  "Initialization:
This function is called at the very beginning of Spacemacs startup,
before layer configuration.
It should only modify the values of Spacemacs settings."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non-nil then enable support for the portable dumper. You'll need
   ;; to compile Emacs 27 from source following the instructions in file
   ;; EXPERIMENTAL.org at to root of the git repository.
   ;; (default nil)
   dotspacemacs-enable-emacs-pdumper nil

   ;; Name of executable file pointing to emacs 27+. This executable must be
   ;; in your PATH.
   ;; (default "emacs")
   dotspacemacs-emacs-pdumper-executable-file "emacs"

   ;; Name of the Spacemacs dump file. This is the file will be created by the
   ;; portable dumper in the cache directory under dumps sub-directory.
   ;; To load it when starting Emacs add the parameter `--dump-file'
   ;; when invoking Emacs 27.1 executable on the command line, for instance:
   ;;   ./emacs --dump-file=$HOME/.emacs.d/.cache/dumps/spacemacs-27.1.pdmp
   ;; (default spacemacs-27.1.pdmp)
   dotspacemacs-emacs-dumper-dump-file (format "spacemacs-%s.pdmp" emacs-version)

   ;; If non-nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t

   ;; Maximum allowed time in seconds to contact an ELPA repository.
   ;; (default 5)
   dotspacemacs-elpa-timeout 5

   ;; Set `gc-cons-threshold' and `gc-cons-percentage' when startup finishes.
   ;; This is an advanced option and should not be changed unless you suspect
   ;; performance issues due to garbage collection operations.
   ;; (default '(100000000 0.1))
   dotspacemacs-gc-cons '(100000000 0.1)

   ;; Set `read-process-output-max' when startup finishes.
   ;; This defines how much data is read from a foreign process.
   ;; Setting this >= 1 MB should increase performance for lsp servers
   ;; in emacs 27.
   ;; (default (* 1024 1024))
   dotspacemacs-read-process-output-max (* 1024 1024)

   ;; If non-nil then Spacelpa repository is the primary source to install
   ;; a locked version of packages. If nil then Spacemacs will install the
   ;; latest version of packages from MELPA. (default nil)
   dotspacemacs-use-spacelpa nil

   ;; If non-nil then verify the signature for downloaded Spacelpa archives.
   ;; (default t)
   dotspacemacs-verify-spacelpa-archives t

   ;; If non-nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. Note that checking for
   ;; new versions works via git commands, thus it calls GitHub services
   ;; whenever you start Emacs. (default nil)
   dotspacemacs-check-for-update nil

   ;; If non-nil, a form that evaluates to a package directory. For example, to
   ;; use different package directories for different Emacs versions, set this
   ;; to `emacs-version'. (default 'emacs-version)
   dotspacemacs-elpa-subdirectory 'emacs-version

   ;; One of `vim', `emacs' or `hybrid'.
   ;; `hybrid' is like `vim' except that `insert state' is replaced by the
   ;; `hybrid state' with `emacs' key bindings. The value can also be a list
   ;; with `:variables' keyword (similar to layers). Check the editing styles
   ;; section of the documentation for details on available variables.
   ;; (default 'vim)
   dotspacemacs-editing-style 'hybrid

   ;; If non-nil show the version string in the Spacemacs buffer. It will
   ;; appear as (spacemacs version)@(emacs version)
   ;; (default t)
   dotspacemacs-startup-buffer-show-version t

   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official

   ;; List of items to show in startup buffer or an association list of
   ;; the form `(list-type . list-size)`. If nil then it is disabled.
   ;; Possible values for list-type are:
   ;; `recents' `bookmarks' `projects' `agenda' `todos'.
   ;; List sizes may be nil, in which case
   ;; `spacemacs-buffer-startup-lists-length' takes effect.
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 7)
                                agenda
                                (todos . 10)
                                bookmarks)

   ;; True if the home buffer should respond to resize events. (default t)
   dotspacemacs-startup-buffer-responsive t

   ;; Default major mode for a new empty buffer. Possible values are mode
   ;; names such as `text-mode'; and `nil' to use Fundamental mode.
   ;; (default `text-mode')
   dotspacemacs-new-empty-buffer-major-mode 'text-mode

   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode

   ;; Initial message in the scratch buffer, such as "Welcome to Spacemacs!"
   ;; (default nil)
   dotspacemacs-initial-scratch-message nil

   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press `SPC T n' to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(gruvbox-dark-medium
                         spacemacs-dark
                         gruvbox-light-medium
                         spacemacs-light)

   ;; Set the theme for the Spaceline. Supported themes are `spacemacs',
   ;; `all-the-icons', `custom', `doom', `vim-powerline' and `vanilla'. The
   ;; first three are spaceline themes. `doom' is the doom-emacs mode-line.
   ;; `vanilla' is default Emacs mode-line. `custom' is a user defined themes,
   ;; refer to the DOCUMENTATION.org for more info on how to create your own
   ;; spaceline theme. Value can be a symbol or list with additional properties.
   ;; (default '(spacemacs :separator wave :separator-scale 1.5))
   dotspacemacs-mode-line-theme '(spacemacs :separator wave :separator-scale 1.5)

   ;; If non-nil the cursor color matches the state color in GUI Emacs.
   ;; (default t)
   dotspacemacs-colorize-cursor-according-to-state t

   ;; Default font or prioritized list of fonts.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 13
                               :weight normal
                               :width normal)

   ;; The leader key (default "SPC")
   dotspacemacs-leader-key "SPC"

   ;; The key used for Emacs commands `M-x' (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"

   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"

   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"

   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","

   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m" for terminal mode, "<M-return>" for GUI mode).
   ;; Thus M-RET should work as leader key in both GUI and terminal modes.
   ;; C-M-m also should work in terminal mode, but not in GUI mode.
   dotspacemacs-major-mode-emacs-leader-key (if window-system "<M-return>" "C-M-m")

   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs `C-i', `TAB' and `C-m', `RET'.
   ;; Setting it to a non-nil value, allows for separate commands under `C-i'
   ;; and TAB or `C-m' and `RET'.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil

   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"

   ;; If non-nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil

   ;; If non-nil then the last auto saved layouts are resumed automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil

   ;; If non-nil, auto-generate layout name when creating new layouts. Only has
   ;; effect when using the "jump to layout by number" commands. (default nil)
   dotspacemacs-auto-generate-layout-names nil

   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1

   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache

   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5

   ;; If non-nil, the paste transient-state is enabled. While enabled, after you
   ;; paste something, pressing `C-j' and `C-k' several times cycles through the
   ;; elements in the `kill-ring'. (default nil)
   dotspacemacs-enable-paste-transient-state nil

   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4

   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom

   ;; Control where `switch-to-buffer' displays the buffer. If nil,
   ;; `switch-to-buffer' displays the buffer in the current window even if
   ;; another same-purpose window is available. If non-nil, `switch-to-buffer'
   ;; displays the buffer in a same-purpose window even if the buffer can be
   ;; displayed in the current window. (default nil)
   dotspacemacs-switch-to-buffer-prefers-purpose nil

   ;; If non-nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t

   ;; If non-nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil

   ;; If non-nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil

   ;; If non-nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup t

   ;; If non-nil the frame is undecorated when Emacs starts up. Combine this
   ;; variable with `dotspacemacs-maximized-at-startup' in OSX to obtain
   ;; borderless fullscreen. (default nil)
   dotspacemacs-undecorated-at-startup nil

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90

   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90

   ;; If non-nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t

   ;; If non-nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t

   ;; If non-nil unicode symbols are displayed in the mode line.
   ;; If you use Emacs as a daemon and wants unicode characters only in GUI set
   ;; the value to quoted `display-graphic-p'. (default t)
   dotspacemacs-mode-line-unicode-symbols t

   ;; If non-nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t

   ;; Control line numbers activation.
   ;; If set to `t', `relative' or `visual' then line numbers are enabled in all
   ;; `prog-mode' and `text-mode' derivatives. If set to `relative', line
   ;; numbers are relative. If set to `visual', line numbers are also relative,
   ;; but lines are only visual lines are counted. For example, folded lines
   ;; will not be counted and wrapped lines are counted as multiple lines.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :visual nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; When used in a plist, `visual' takes precedence over `relative'.
   ;; (default nil)
   dotspacemacs-line-numbers nil

   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil

   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil

   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc...
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil

   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all

   ;; If non-nil, start an Emacs server if one is not already running.
   ;; (default nil)
   dotspacemacs-enable-server t

   ;; Set the emacs server socket location.
   ;; If nil, uses whatever the Emacs default is, otherwise a directory path
   ;; like \"~/.emacs.d/server\". It has no effect if
   ;; `dotspacemacs-enable-server' is nil.
   ;; (default nil)
   dotspacemacs-server-socket-dir nil

   ;; If non-nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil

   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `rg', `ag', `pt', `ack' and `grep'.
   ;; (default '("rg" "ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")

   ;; Format specification for setting the frame title.
   ;; %a - the `abbreviated-file-name', or `buffer-name'
   ;; %t - `projectile-project-name'
   ;; %I - `invocation-name'
   ;; %S - `system-name'
   ;; %U - contents of $USER
   ;; %b - buffer name
   ;; %f - visited file name
   ;; %F - frame name
   ;; %s - process status
   ;; %p - percent of buffer above top of window, or Top, Bot or All
   ;; %P - percent of buffer above bottom of window, perhaps plus Top, or Bot or All
   ;; %m - mode name
   ;; %n - Narrow if appropriate
   ;; %z - mnemonics of buffer, terminal, and keyboard coding systems
   ;; %Z - like %z, but including the end-of-line format
   ;; (default "%I@%S")
   dotspacemacs-frame-title-format "%I@%S"

   ;; Format specification for setting the icon title format
   ;; (default nil - same as frame-title-format)
   dotspacemacs-icon-title-format nil

   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed' to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil

   ;; If non nil activate `clean-aindent-mode' which tries to correct
   ;; virtual indentation of simple modes. This can interfer with mode specific
   ;; indent handling like has been reported for `go-mode'.
   ;; If it does deactivate it here.
   ;; (default t)
   dotspacemacs-use-clean-aindent-mode t

   ;; If non-nil activate `snoopy-mode' which shifts your number row
   ;; to match the set of signs given in `dotspacemacs-snoopy-keyrow'
   ;; in programming modes (insert-mode only). (default nil)
   dotspacemacs-use-snoopy-mode nil

   ;; Text of shifted values from your
   ;; keyboard's number row. (default '!@#$%^&*()')
   dotspacemacs-snoopy-keyrow "!@#$%^&*()"

   ;; Either nil or a number of seconds. If non-nil zone out after the specified
   ;; number of seconds. (default nil)
   dotspacemacs-zone-out-when-idle nil

   ;; Run `spacemacs/prettify-org-buffer' when
   ;; visiting README.org files of Spacemacs.
   ;; (default nil)
   dotspacemacs-pretty-docs nil

   ;; If nil the home buffer shows the full path of agenda items
   ;; and todos. If non nil only the file name is shown.
   dotspacemacs-home-shorten-agenda-source nil))

(defun dotspacemacs/user-env ()
  "Environment variables setup.
This function defines the environment variables for your Emacs session. By
default it calls `spacemacs/load-spacemacs-env' which loads the environment
variables declared in `~/.spacemacs.env' or `~/.spacemacs.d/.spacemacs.env'.
See the header of this file for more information."
  (spacemacs/load-spacemacs-env))

(defun dotspacemacs/user-init ()
  "Initialization for user code:
This function is called immediately after `dotspacemacs/init', before layer
configuration.
It is mostly for variables that should be set before packages are loaded.
If you are unsure, try setting them in `dotspacemacs/user-config' first."
  ;; FIXME: recursive load for emacs version >= 27
  ;; https://github.com/syl20bnr/spacemacs/issues/12843
  (require 'semantic/db-file)
  ;; fixes font when emacs started in daemon mode
  (spacemacs|do-after-display-system-init
   (spacemacs/set-default-font dotspacemacs-default-font)))

(defun dotspacemacs/user-load ()
  "Library to load while dumping.
This function is called only while dumping Spacemacs configuration. You can
`require' or `load' the libraries of your choice that will be included in the
dump.")


(defun dotspacemacs/user-config ()
  "Configuration for user code:
This function is called at the very end of Spacemacs startup, after layer
configuration.
Put your configuration code here, except for variables that should be set
before packages are loaded."

  ;; Emacs configuration
  (setq vc-follow-symlinks t)
  (unless (eq system-type 'gnu/linux)
    (unless (display-graphic-p)
      ;; in terminal when asking for gpg password
      (setq epa-pinentry-mode 'loopback)))

  (desktop-save-mode t)
  (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))

  ;; FIXME: Which key fix for master emacs 26.0.50
  (defalias 'display-buffer-in-major-side-window 'window--make-major-side-window)
  ;; FIXME: issue https://github.com/syl20bnr/spacemacs/issues/9549
  (require 'helm-bookmark)

  ;; startup
  (setq spacemacs-buffer-startup-lists-length nil)

  ;; layouts configuration
  (setq layouts-enable-autosave t)

  ;; epa encryption
  (setq epa-file-select-keys 0
        epa-file-cache-passphrase-for-symmetric-encryption t)
  (add-to-list 'load-suffixes ".el.gpg")

  ;; tramp configuration
  (setq tramp-default-method "rsync")

  ;; enable visual line navigation
  (define-key evil-motion-state-map "j" 'evil-next-visual-line)
  (define-key evil-motion-state-map "k" 'evil-previous-visual-line)
  (define-key evil-visual-state-map "j" 'evil-next-visual-line)
  (define-key evil-visual-state-map "k" 'evil-previous-visual-line)

  ;; basic programming settings
  (defun my-prog-settings()
    (spacemacs/toggle-fill-column-indicator-on)
    (spacemacs/toggle-relative-line-numbers-on))
  (add-hook 'prog-mode-hook 'my-prog-settings)

  ;; basic text settings
  (add-hook 'text-mode-hook 'visual-line-mode)
  (spacemacs/set-leader-keys "C-t l" 'visual-line-mode)

  ;; Chrome settings
  (add-hook 'edit-server-done-hook (lambda () (shell-command "wmctrl -a \"Google Chrome\"")))

  ;; Magit settings
  (setq magit-org-todos-filename org-projectile-file)

  ;; password-store settings
  (setq password-store-password-length 18)

  ;; calendar settings
  (evil-set-initial-state 'calendar-mode 'emacs)
  (setq calendar-date-style "european")

  ;; org settings
  (setq org-directory (expand-file-name "~/Dropbox/Org"))
  (defun aam/org-path (path) (concat org-directory "/" path))
  (setq aam/org-inbox (aam/org-path "inbox.org"))
  (setq deft-directory org-directory
        deft-recursive t
        deft-recursive-ignore-dir-regexp "\\(?:\\.\\|\\.\\.\\|journal\\|data\\)$")
  ;; set org-roam directory before loading agenda
  (setq org-roam-directory org-directory)
  (setq org-default-notes-file (aam/org-path "refile.org"))
  (add-hook 'org-mode-hook 'spacemacs/toggle-auto-fill-mode-on)
  ;; latex preview for org-mode
  (setq org-preview-latex-image-directory "/tmp/ltximg"
        org-latex-preview-ltxpng-directory "/tmp/ltxpng")

  ;; sync buffers
  (add-hook 'org-mode-hook 'auto-revert-mode)

  ;; org appearance
  (setq org-startup-indented t)
  (setq org-todo-keyword-faces
        '(("FAILED" . (:foreground "red" :weight bold :strike-through t))
          ("CANCELED" . (:foreground "blue" :weight bold))
          ("POSTPONED" . (:foreground "blue" :weight bold))))

  ;; agenda settings
  (setq org-agenda-files (list (aam/org-path "work.org")
                               (aam/org-path "projects")
                               (aam/org-path "personal.org")
                               ;; File so sync with google calendar
                               (aam/org-path "todo.org")
                               (aam/org-path "bookmarks.org")
                               (aam/org-path "ideas.org")
                               ;; (concat org-directory "/drills.org")
                               (aam/org-path "papers.org")))
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-custom-commands
        '(("f" occur-tree "FIXME")
          ("w" "Weekly tasks" tags "+weekly")
          ("W" "Waiting tasks" todo-tree "WAITING")
          ("c" "Cleaning tasks" tags "+cleaning")
          ("d" "Daily tasks" tags "+daily")
          ("h" "Habits" tags-todo "STYLE=\"habit\""
           ((org-agenda-overriding-header "Habits")
            (org-agenda-sorting-strategy
             '(todo-state-down effort-up category-keep))))))

  (setq org-clock-persist 'history)
  (org-clock-persistence-insinuate)

  ;; org capture settings
  (setq org-capture-templates
        `(
          ("t" "Toto" entry (file ,aam/org-inbox)
           "* TODO %?
:PROPERTIES:
:CREATED:%U
:END:\n")
          ("T" "Todo with context" entry (file ,aam/org-inbox)
           "* TODO %?
:PROPERTIES:
:CREATED:%U
:END:
%c
%i
Link: %a\n")
          ;; todo template for calfw calendar
          ("c" "calfw2org" entry (file ,aam/org-inbox)
           "* TODO %?
SCHEDULED: %(cfw:org-capture-day)
:PROPERTIES:
:CREATED:%U
:END:\n")
          ("e" "Email" entry
           (file ,(concat org-directory "/inbox.org"))
           "* TODO [#A] Reply: %a :@home:@work:"
           :immediate-finish t)
          ("l" "Web link" entry (file ,aam/org-inbox)
           "* TODO %(org-cliplink-capture) :readlater:
:PROPERTIES:
:CREATED:%U
:END:\n" :immediate-finish t)
          ("f" "Elfeed link" entry (file ,aam/org-inbox)
           "* %?%:description :readlater:
:PROPERTIES:
:CREATED:%U
:END:
- %:link
%(when (< 0 (length \"%:elfeed-entry-link\")) (concat \"- web link: \" \"%:elfeed-entry-link\"))"
           :immidiate-finish t)
          ;; template for org-protocol-capture-html
          ("w" "Web site" entry (file "")
           "* %a :website:\n\n%U %?\n\n%:initial")))

  ;; org babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((R . t)
     (ditaa . t)
     (dot . t)
     (emacs-lisp . t)
     (gnuplot . t)
     (haskell . nil)
     (latex . t)
     (ledger . t)
     (ocaml . nil)
     (octave . t)
     (plantuml . t)
     (python . t)
     (ruby . t)
     (screen . nil)
     (shell .t)
     (sql . nil)
     (sqlite . t)))
  (setq org-plantuml-jar-path "/usr/share/plantuml/plantuml.jar"
        org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")

  ;; cdlatex for org-mode
  (spacemacs|diminish org-cdlatex-mode)
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)

  ;; additional org-modules
  ;; anki like functionality
  (setq org-learn-always-reschedule t)
  ;; tracking habits
  (require 'org-habit)
  (add-to-list 'org-modules 'org-habit t)
  (setq org-habit-graph-column 80)
  (setq org-log-into-drawer "LOGBOOK")
  ;; pomodoro and timer
  (add-to-list 'org-modules 'org-timer t)
  ;; org-effectiveness
  (add-to-list 'org-modules 'org-effectiveness t)
  ;; org-contacts
  (require 'org-contacts)
  (setq org-contacts-files (aam/org-path "contacts.org"))

  ;; org-roam settings
  (setq org-roam-tag-sources '(prop last-directory))
  (setq org-roam-file-exclude-regexp "data/*")
  (setq org-roam-graph-exclude-matcher '("journal"))
  (setq org-roam-capture-templates
        '(("d" "default" plain #'org-roam-capture--get-point "%?"
           :file-name "%<%Y%m%d%H%M%S>-${slug}"
           :head "#+title: ${title}\n" :unnarrowed t)

          ("r" "reference" plain (function org-roam-capture--get-point)
           "#+ROAM_KEY: %^{citekey}%? fullcite: %\1
#+ROAM_TAGS: %^{type}
This %\2 deals with ..."
           :file-name "papers/%<%Y-%m-%d-%H%M%S>_${title}"
           :head "#+TITLE: ${title}"
           :unnarrowed t)))
  ;; org-roam-bibtex settings
  (setq orb-preformat-keywords
        '("citekey" "date" "year" "type" "pdf?" "note?" "author" "editor"
          "journal" "url" "doi" "keywords"
          "author-abbrev" "editor-abbrev" "author-or-editor-abbrev"))
  (with-eval-after-load 'orb-note-actions
    (add-to-list 'orb-note-actions-user (cons "Open PDF file(s) externally" #'aam-open-pdf-external)))
  (setq orb-templates
        '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "papers/${citekey}"
           :head "#+TITLE: ${title}
#+ROAM_KEY: ${ref}
#+ROAM_TAGS:

- tags ::
- keywords :: ${keywords}
- backlinks ::

* ${year} - ${title}
:PROPERTIES:
:Custom_ID: ${citekey}
:AUTHOR: ${author}
:JOURNAL: ${journal}
:YEAR: ${year}
:DOI: ${doi}
:URL: ${url}
:NOTER_DOCUMENT: %(aam-get-cite-pdf-filename \"${citekey}\")
:END:
cite:${citekey} [[file:%(aam-get-cite-pdf-filename \"${citekey}\")][pdf]]\n")))

  ;; configure org-journal
  (setq org-journal-dir (aam/org-path "journal"))
  (setq org-journal-date-prefix "#+TODO: TODO(t) STARTED(s) | DONE(d) POSTPONED(p) CANCELED(c) FAILED(f)\n* ")
  (setq org-journal-file-format "%Y%m%d.org")
  (setq org-journal-carryover-items "TODO=\"POSTPONED\"")
  (setq org-journal-enable-encryption t)
  (setq org-journal-agenda-days 7)
  (setq org-journal-agenda-files (org-extras/org-journal-list-agenda-files org-journal-agenda-days))
  (setq org-agenda-files (append org-journal-agenda-files org-agenda-files))

  ;; org-crypt
  (require 'org-crypt)
  (setq org-crypt-key "alexander.matyasko@gmail.com")
  (org-crypt-use-before-save-magic)
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))

  ;; show images inline (only works in GUI)
  (when (window-system)
    (setq org-startup-with-inline-images t))
  ;; limit images width
  (setq org-image-actual-width '(800))
  ;; org-doing settings
  (setq org-doing-file (aam/org-path "todo.org"))

  ;; org-ref configuration
  (setq aam/bib-dir (expand-file-name "~/Dropbox/Research/Bibliography"))
  (defun aam/bib-path (path) (concat aam/bib-dir "" path))
  (setq my-bibtex-files (list (aam/bib-path "refs.bib")
                              (aam/bib-path "/myrefs.bib")))
  (setq reftex-default-bibliography my-bibtex-files)
  (setq org-ref-bibliography-notes (aam/org-path "papers.org")
        org-ref-default-bibliography my-bibtex-files
        org-ref-pdf-directory (aam/bib-path "/papers"))
  (setq org-ref-note-title-format "** TODO %y - %t\n:PROPERTIES:\n:Custom_ID: %k\n:AUTHOR: %9a\n:JOURNAL: %j\n:Year: %y\n:VOLUME: %v\n:PAGES: %p\n:DOI: %D\n:URL: %U\n:NOTER_DOCUMENT: %F\n:END:\n[[cite:%k]] [[file:%F][pdf]]\n")
  (setq org-ref-create-notes-hook nil)
  ;; helm-bibtex
  (spacemacs/set-leader-keys "hc" 'helm-bibtex)
  (setq bibtex-completion-notes-path (aam/org-path "/papers.org"))
  (setq bibtex-completion-pdf-symbol "⌘")
  (setq bibtex-completion-notes-symbol "✎")
  (setq bibtex-completion-additional-search-fields '(keywords tags))
  (setq bibtex-completion-format-citation-functions
        '((org-mode      . bibtex-completion-format-citation-org-link-to-PDF)
          (latex-mode    . bibtex-completion-format-citation-cite)
          (markdown-mode . bibtex-completion-format-citation-pandoc-citeproc)
          (default       . bibtex-completion-format-citation-default)))
  (setq bibtex-completion-bibliography my-bibtex-files)
  (setq bibtex-completion-library-path org-ref-pdf-directory)

  ;; ebib settings
  (setq ebib-preload-bib-files my-bibtex-files)
  (evil-set-initial-state 'ebib-index-mode 'emacs)
  (evil-set-initial-state 'ebib-entry-mode 'emacs)
  (evil-set-initial-state 'ebib-log-mode 'emacs)

  ;; Latex/Tex settings
  (defun my-latex-settings()
    (add-to-list 'TeX-output-view-style
                 '("^pdf$" "." "okular --unique %o#src:%n%b"))
    ;; turn on visual line wrapping and visual line navigation
    (spacemacs/toggle-visual-line-navigation-on)
    ;; set manually docset for zeal
    (setq zeal-at-point-docset "latex"))
  (add-hook 'LaTeX-mode-hook 'my-latex-settings)
  ;; company-reftex: eqref, autoref and cref
  (setq company-reftex-labels-regexp "\\\\\\(?:eq\\|auto\\|c\\)?ref{\\([^}]*\\)\\=")

  ;; Auctex settings
  (setq-default TeX-master nil) ; Query for master file.
  (setq TeX-auto-untabify t)
  ;; zathura for emacs
  (setq zathura-procs ())
  (defun zathura-forward-search ()
    ;; Open the compiled pdf in Zathura with synctex. This is complicated since
    ;; 1) Zathura refuses to acknowledge Synctex directive if the pdf is not
    ;; already opened
    ;; 2) This means we have to bookkeep open Zathura processes ourselves: first
    ;; open a new pdf from the beginning, if it is not already open. Then call
    ;; Zathura again with the synctex directive.
    (interactive)
    (let* ((zathura-launch-buf (get-buffer-create "*Zathura Output*"))
           (pdfname (TeX-master-file "pdf"))
           (zatentry (assoc pdfname zathura-procs))
           (zatproc (if (and zatentry (process-live-p (cdr zatentry)))
                        (cdr zatentry)
                      (progn
                        (let ((proc (progn (message "Launching Zathura")
                                           (start-process "zathura-launch"
                                                          zathura-launch-buf "zathura"
                                                          "-x" "emacsclient +%{line} %{input}" pdfname))))
                          (when zatentry
                            (setq zathura-procs (delq zatentry zathura-procs)))
                          (add-to-list 'zathura-procs (cons pdfname proc))
                          (set-process-query-on-exit-flag proc nil)
                          proc))))
           (pid (process-id zatproc))
           (synctex (format "%s:0:%s"
                            (TeX-current-line)
                            (TeX-current-file-name-master-relative))))
      (start-process "zathura-synctex" zathura-launch-buf "zathura" "--synctex-forward" synctex pdfname)))
  ;; Pdf syncing
  (setq TeX-view-program-list
        '(("Skim" "displayline -b -g %n %o %b")
          ("Evince" "evince --page-index=%(outpage) %o")
          ("Okular" "okular --unique %o#src:%n%b")
          ("Zathura" zathura-forward-search)
          ("PDF Tools" TeX-pdf-tools-sync-view)))
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")
                                     (output-dvi "xdvi")))
  (setq TeX-source-correlate-method 'synctex
        TeX-source-correlate-mode t
        TeX-source-correlate-start-server t)
  (with-eval-after-load 'tex
    (add-to-list 'TeX-command-list '("View Evince" "evince %o" TeX-run-command nil t
                                     :help "Open document using evince"))
    (add-to-list 'TeX-command-list '("View Zathura" "zathura %o" TeX-run-command nil t
                                     :help "Open document using zathura")))

  ;; Doc-view settings
  (defun my-doc-view-settings ()
    ;; Automatic update for pdf
    (auto-revert-mode)
    ;; Emacs freezes with linum-mode
    (linum-mode -1))

  (add-hook 'doc-view-mode-hook 'my-doc-view-settings)
  (defadvice doc-view-display (after fit-width activate)
    (doc-view-fit-width-to-window))

  ;; Epub reading
  (setq auto-mode-alist (append (list '("\\.epub$" . archive-mode)) auto-mode-alist))
  (setq auto-coding-alist (append (list '("\\.epub$" . no-conversion)) auto-coding-alist))

  ;; configure langtool
  (when (spacemacs/system-is-linux)
    (setq langtool-java-classpath
          "/usr/share/languagetool/*:/usr/share/java/languagetool/*")
    (setq langtool-default-language "en-US"))
  ;; thesaurus api-key
  (setq thesaurus-bhl-api-key "api-key")

  ;; C++ development
  (setq ycmd-server-command (list "python" (file-truename "~/local/tools/ycmd/ycmd")))
  (setq ycmd-force-semantic-completion t)
  (add-to-list 'auto-mode-alist '("\\.cu\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.cuh\\'" . c++-mode))

  ;; Python development
  (setq ropemacs-confirm-saving 'nil)
  (setq ropemacs-enable-autoimport 't)

  ;; Lua development
  (setq lua-default-application "qlua")
  (setq lua-default-command-switches (quote ("-ltorch" "-lenv" "-i")))

  ;; email configuration
  (when (spacemacs/system-is-linux)
    (setq mu4e-mu-home "~/.cache/mu"
          mu4e-sent-folder "/sent"
          mu4e-refile-folder "/archive"
          mu4e-drafts-folder "/drafts"
          mu4e-trash-folder "/trash"
          mu4e-attachment-dir "~/Downloads"
          mu4e-get-mail-command "mbsync -a"
          mu4e-update-interval 600
          ;; give me ISO(ish) format date-time stamps in the header list
          mu4e-headers-date-format "%Y-%m-%d %H:%M"
          mu4e-compose-signature t
          mu4e-compose-signature-auto-include nil
          mu4e-compose-dont-reply-to-self t
          mu4e-view-show-images t
          mu4e-show-images t
          mu4e-view-image-max-width 800
          mu4e-view-show-addresses t
          ;; setup queue mail dir
          smtpmail-queue-dir (concat mu4e-mu-home "/queue")
          message-kill-buffer-on-exit t)

    ;; See: http://emacs.stackexchange.com/questions/3051/how-can-i-use-eww-as-a-renderer-for-mu4e
    (defun my-render-html-message ()
      "Replacement for standard html2text using shr."
      (let ((dom (libxml-parse-html-region (point-min) (point-max))))
        (erase-buffer)
        (shr-insert-document dom)
        (goto-char (point-min))))
    (setq mu4e-html2text-command 'my-render-html-message)
    ;; (setq mu4e-html2text-command "w3m -dump -T text/html")
    (setq mu4e-view-prefer-html t)
    (require 'mu4e-view)
    (add-to-list 'mu4e-view-actions
                 '("xView with xwidget" . mu4e-action-view-with-xwidget))

    ;; org-mu4e settings
    (setq org-mu4e-convert-to-html t)

    ;; customize the reply-quote-string
    ;; M-x find-function RET message-citation-line-format for docs
    (setq message-citation-line-format "%N @ %Y-%m-%d %H:%M %Z:\n")
    (setq message-citation-line-function 'message-insert-formatted-citation-line)

    ;; the headers to show in the headers list -- a pair of a field
    ;; and its width, with `nil' meaning 'unlimited'
    ;; (better only use that for the last field.
    ;; These are the defaults:
    (setq mu4e-headers-fields
          '((:date          .  25)
            (:flags         .   6)
            (:from          .  22)
            (:subject       .  nil)))
    (setq mu4e-bookmarks
          `(("flag:unread AND NOT flag:trashed and NOT maildir:\"/*Trash*\" and NOT maildir:\"/*Delete*\" and NOT maildir:\"/*Spam*\" and NOT maildir:\"/*Junk*\"" "Unread messages" ?u)
            ("flag:new and NOT flag:trashed and NOT maildir:\"/*Trash*\" and NOT maildir:\"/*Delete*\" and NOT maildir:\"/*Spam*\" and NOT maildir:\"/*Junk*\""    "New messages"    ?n)
            ("maildir:\"/*INBOX*\""                       "Inbox's messages"     ?i)
            ("date:today..now"                            "Today's messages"     ?t)
            ("date:7d..now"                               "Last 7 days"          ?w)
            ("maildir:\"/INBOX\" and flag:flagged"        "Flagged in INBOX"     ?f)
            ("mime:image/*"                               "Messages with images" ?p)
            ("maildir:\"/*Spam*\" or maildir:\"/*Junk*\"" "Spam messages"        ?s)))
    (setq mu4e-user-mail-address-list '("alexander.matyasko@gmail.com"
                                        "aliaksan001@e.ntu.edu.sg"
                                        "amatyasko@e.ntu.edu.sg"
                                        "alexander.matyasko@yandex.ru"))

    ;; mu4e-maildir
    (setq mu4e-maildir-shortcuts
          '(("/gmail/INBOX"  . ?g)
            ("/office/INBOX" . ?c)
            ("/work/INBOX"   . ?w)
            ("/yandex/INBOX" . ?y)))
    (setq mu4e-maildirs-extension-maildir-separator    "*"
          mu4e-maildirs-extension-submaildir-separator "✉"
          mu4e-maildirs-extension-action-text          nil)

    ;; mail account list
    (setq mu4e-contexts
          `( ,(make-mu4e-context
               :name "Gmail"
               :enter-func
               (lambda () (mu4e-message "Switching to Gmail"))
               ;; ;; we match based on the contact-fields of the message
               ;; :match-func
               ;; (lambda (msg)
               ;;   (when msg
               ;;     (mu4e-message-contact-field-matches msg
               ;;                                         :to "alexander.matyasko@gmail.com")))
               :match-func
               (lambda (msg)
                 (when msg
                   (string-match-p "^/gmail" (mu4e-message-field msg :maildir))))
               :vars
               '((user-mail-address            . "alexander.matyasko@gmail.com")
                 (user-full-name               . "Alexander Matyasko")
                 (mu4e-sent-folder             . "/gmail/[Gmail]/Sent Mail")
                 (mu4e-drafts-folder           . "/gmail/[Gmail]/Drafts")
                 (mu4e-trash-folder            . "/gmail/[Gmail]/Trash")
                 (mu4e-compose-signature       . (concat
                                                  "Best regards,\n"
                                                  "Alexander Matyasko\n"))
                 (message-send-mail-function   . smtpmail-send-it)
                 (smtpmail-stream-type         . starttls)
                 (smtpmail-default-smtp-server . "smtp.gmail.com")
                 (smtpmail-smtp-server         . "smtp.gmail.com")
                 (smtpmail-smtp-service        . 587)))
             ,(make-mu4e-context
               :name "Ntu"
               :enter-func
               (lambda () (mu4e-message "Switching to Ntu mail"))
               ;; :match-func
               ;; (lambda (msg)
               ;;   (when msg
               ;;     (mu4e-message-contact-field-matches msg
               ;;                                         :to "aliaksan001@e.ntu.edu.sg")))
               :match-func
               (lambda (msg)
                 (when msg
                   (string-match-p "^/office" (mu4e-message-field msg :maildir))))
               :vars
               '((user-mail-address            . "aliaksan001@e.ntu.edu.sg")
                 (user-full-name               . "Alexander Matyasko")
                 (mu4e-sent-folder             . "/office/Sent Items")
                 (mu4e-drafts-folder           . "/office/Drafts")
                 (mu4e-trash-folder            . "/office/Deleted Items")
                 (mu4e-compose-signature       . (concat
                                                  "Best regards,\n"
                                                  "Alexander Matyasko\n"))
                 (message-send-mail-function   . smtpmail-send-it)
                 (smtpmail-stream-type         . starttls)
                 (smtpmail-default-smtp-server . "smtp.office365.com")
                 (smtpmail-smtp-server         . "smtp.office365.com")
                 (smtpmail-smtp-service        . 587)))
             ,(make-mu4e-context
               :name "Work"
               :enter-func
               (lambda () (mu4e-message "Switching to work mail"))
               ;; :match-func
               ;; (lambda (msg)
               ;;   (when msg
               ;;     (mu4e-message-contact-field-matches msg
               ;;                                         :to "amatyasko@e.ntu.edu.sg")))
               :match-func
               (lambda (msg)
                 (when msg
                   (string-match-p "^/work" (mu4e-message-field msg :maildir))))
               :vars
               '((user-mail-address            . "amatyasko@e.ntu.edu.sg")
                 (user-full-name               . "Alexander Matyasko")
                 (mu4e-sent-folder             . "/work/Sent")
                 (mu4e-drafts-folder           . "/work/Drafts")
                 (mu4e-trash-folder            . "/work/Trash")
                 (mu4e-compose-signature       . (concat
                                                  "Best regards,\n"
                                                  "Alexander Matyasko\n"))
                 (message-send-mail-function   . smtpmail-send-it)
                 (smtpmail-stream-type         . starttls)
                 ;; use localhost davmail
                 (smtpmail-default-smtp-server . "localhost")
                 (smtpmail-smtp-server         . "localhost")
                 (smtpmail-smtp-service        . 1025)))
             ,(make-mu4e-context
               :name "Yandex"
               :enter-func
               (lambda () (mu4e-message "Switching to Yandex mail"))
               ;; :match-func
               ;; (lambda (msg)
               ;;   (when msg
               ;;     (mu4e-message-contact-field-matches msg
               ;;                                         :to "alexander.matyasko@yandex.ru")))
               :match-func
               (lambda (msg)
                 (when msg
                   (string-match-p "^/yandex" (mu4e-message-field msg :maildir))))
               :vars
               '((user-mail-address            . "alexander.matyasko@yandex.ru")
                 (user-full-name               . "Alexander Matyasko")
                 (mu4e-sent-folder             . "/yandex/Sent")
                 (mu4e-drafts-folder           . "/yandex/Drafts")
                 (mu4e-trash-folder            . "/yandex/Trash")
                 (mu4e-compose-signature       . (concat
                                                  "Best regards,\n"
                                                  "Alexander Matyasko\n"))
                 (message-send-mail-function   . smtpmail-send-it)
                 (smtpmail-stream-type         . starttls)
                 (smtpmail-default-smtp-server . "smtp.yandex.com")
                 (smtpmail-smtp-server         . "smtp.yandex.com")
                 (smtpmail-smtp-service        . 465)))))

    (setq mu4e-compose-context-policy 'ask-if-none
          mu4e-context-policy 'pick-first)
    ;; (mu4e/mail-account-reset)

    ;; email org-contacts
    (setq mu4e-org-contacts-file org-contacts-files)
    (add-to-list 'mu4e-view-actions
                 '("org-contact-add" . mu4e-action-add-org-contact) t))

  ;; message mode hooks
  (add-hook 'message-mode-hook 'turn-on-orgstruct)
  (add-hook 'message-mode-hook 'turn-on-orgstruct++)
  (add-hook 'message-mode-hook 'turn-on-auto-fill)
  (add-hook 'message-mode-hook 'orgtbl-mode)
  ;; confirmation
  (add-hook 'message-send-hook
            (lambda ()
              (unless (yes-or-no-p "Sure you want to send this?")
                (signal 'quit nil))))

  (require 'org-mime)
  (setq org-mime-library 'mml)
  (add-hook 'message-mode-hook
            (lambda ()
              (local-set-key "\C-c\M-o" 'org-mime-htmlize)))
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key "\C-c\M-o" 'org-mime-org-buffer-htmlize)))
  (add-hook 'org-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c M-o") 'org-mime-subtree)))
  (add-hook 'org-mime-html-hook
            (lambda ()
              ;; (insert-file-contents "~/git/.emacs.d/personal/css/office.css")
              (org-mime-change-element-style
               "blockquote" "border-left: 2px solid gray; padding-left: 4px;")
              (org-mime-change-element-style
               "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                             "#E6E1DC" "#232323"))))
  ;; twitter settings
  (setq twittering-use-master-password t
        twittering-connection-type-order '(wget curl urllib-http native urllib-https)
        twittering-tinyurl-service 'bit.ly
        twittering-bitly-login "login"
        twittering-bitly-api-key "api-key")

  ;; xwidgets
  (evil-set-initial-state 'xwidget-webkit-mode 'emacs)
  (with-eval-after-load 'xwidget
    (define-key xwidget-webkit-mode-map [mouse-4] 'xwidget-webkit-scroll-down)
    (define-key xwidget-webkit-mode-map [mouse-5] 'xwidget-webkit-scroll-up)
    (define-key xwidget-webkit-mode-map (kbd "k") 'xwidget-webkit-scroll-down)
    (define-key xwidget-webkit-mode-map (kbd "j") 'xwidget-webkit-scroll-up)
    (define-key xwidget-webkit-mode-map (kbd "l") 'xwidget-webkit-scroll-forward)
    (define-key xwidget-webkit-mode-map (kbd "h") 'xwidget-webkit-scroll-backward))

  ;; load encrypted part of config
  (load-library "secure-config"))

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
